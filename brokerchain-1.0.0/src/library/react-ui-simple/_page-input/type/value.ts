// auto generated by dev/system

import { Record } from "immutable";
import { Content } from "./content.js";

export type Value = Record<Content>;

export class ValueIO {
    private _read: () => Value;
    private _write: (v: Value, silent: boolean) => void;

    constructor(opts: { read: () => Value; write: (v: Value, silent: boolean) => void }) {
        this._read = opts.read;
        this._write = opts.write;
    }

    read(): Value {
        return this._read();
    }

    write(v: Value, silent = false) {
        this._write(v, silent);
        return this;
    }

    update(cb: (v: Value) => Value, silent = false) {
        this.write(cb(this.read()), silent);
        return this;
    }

    // FIXME performance issue, it can be slow
    // Consider using a proxy object here to minimal performance issues in complexe projects
    mutate(cb: (v: Content) => void, silent = false) {
        this.update((v) => {
            const content: Content = v.toJS() as any;
            cb(content);
            return Record<Content>(content)();
        }, silent);
        return this;
    }

    proxy(cb: SetValueProxy) {
        return new ValueIO({ read: this._read, write: cb });
    }
}

type SetValueProxy = (v: Value) => Value;
