// auto generated by dev/system
import express from "express";
import { Logger } from "../../../myutils/logger.js";
import { handle_rpc_buffer_slice } from "../buffer-slice/rpc/handle.js";
import { handle_rpc_buffer_slice_batch } from "../buffer-slice-batch/rpc/handle.js";
import { handle_rpc_hex_reverse } from "../hex-reverse/rpc/handle.js";
import { handle_rpc_hex_slice } from "../hex-slice/rpc/handle.js";
import { handle_rpc_hex_slice_batch } from "../hex-slice-batch/rpc/handle.js";

export function attach_rpc_handler(plog: Logger, opt: { exp_app: express.Express }) {
    const log = plog.sub("server.attach_rpc_handler");
    const { exp_app } = opt;

    exp_app.post("/library/buffer/buffer-slice", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.buffer.buffer-slice");
        handle_rpc_buffer_slice(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/buffer/buffer-slice-batch", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.buffer.buffer-slice-batch");
        handle_rpc_buffer_slice_batch(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/buffer/hex-reverse", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.buffer.hex-reverse");
        handle_rpc_hex_reverse(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/buffer/hex-slice", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.buffer.hex-slice");
        handle_rpc_hex_slice(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/buffer/hex-slice-batch", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.buffer.hex-slice-batch");
        handle_rpc_hex_slice_batch(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });
}
