// auto generated by dev/system

import { Logger, set_logger_disabled } from "../../../myutils/logger.js";
import { prompts } from "../../../myutils/index.js";
import { read_json_file } from "../../../myutils/node/file/index.js";
import { Input, Output, check_input, OutputOk } from "./type.js";
import { export_zip_file as target_fun } from "./export.js";
import { rpc_export_zip_file as rpc_target_fun } from "./rpc/client.js";
import yargs from "yargs";

const log = new Logger("cli");
run();

async function run() {
    try {
        const { input, server } = await make_input(log, {
            ok: async (input: Input, server) => {
                return { input, server };
            },
            fail: async (err) => {
                throw err;
            }
        });

        if (server) {
            await rpc_target_fun(
                log,
                {
                    server,
                    input
                },
                {
                    ok: (output) => {
                        console.log(JSON.stringify(output, null, 4));
                        console.log("ðŸ˜„ ok");
                    },

                    fail: (err) => {
                        throw err;
                    }
                }
            );
        } else {
            await target_fun(log, input, {
                ok: (output: OutputOk) => {
                    console.log(JSON.stringify(output, null, 4));
                    console.log("ðŸ˜„ ok");
                },

                fail: (err) => {
                    throw err;
                }
            });
        }
    } catch (err) {
        log.print_unknown_error(err);
        console.log("ðŸ˜¢ fail.");
    }
}

async function make_input<R>(
    plog: Logger,
    cb: {
        ok: (input: Input, rpc_server: string) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input");

    const args = await yargs(process.argv.slice(2))
        .option("input", {
            type: "string",
            description: "Specify the JSON input directly as a command line argument."
        })
        .option("input-file", {
            type: "string",
            description: "Specify the name of a JSON file to read input from."
        })
        .option("server", {
            type: "string",
            description: "Specify the URL of a remote server to send the request to."
        })
        .option("logger-disabled", {
            type: "boolean",
            description: "Disable logging completely."
        })
        .parse();

    const input = args.input || process.env["x_input"];
    const input_file = args.inputFile || process.env["x_input_file"];
    const server = args.server || process.env["x_server"];
    const logger_disabled = args.loggerDisabled || process.env["x_logger_disabled"] === "true";

    if (logger_disabled) {
        set_logger_disabled(true);
    }

    log.variable("input", input);
    log.variable("input_file", input_file);
    log.variable("server", server);
    log.variable("logger_disabled", logger_disabled);

    if (input && input_file) {
        return cb.fail(log.new_error("Conflicting arguments provided. You can use either --input or --input-file, but not both at the same time."));
    }

    if (input) {
        return make_input_from_args(
            log,
            { json_text: input },
            {
                ok: (input) => {
                    return cb.ok(input, server);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            }
        );
    } else if (input_file) {
        return make_input_from_file(
            log,
            { filename: input_file },
            {
                ok: (input) => {
                    return cb.ok(input, server);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            }
        );
    } else {
        return make_input_from_prompts(log, {
            ok: (input) => {
                return cb.ok(input, server);
            },
            fail: (err) => {
                return cb.fail(err);
            }
        });
    }
}

async function make_input_from_args<R>(
    plog: Logger,
    opts: { json_text: string },
    cb: {
        ok: (input: Input) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input_from_args");
    try {
        const input = JSON.parse(opts.json_text);
        log.variable("input", input);

        return check_input(log, input, {
            ok: () => {
                return cb.ok(input);
            },
            fail: (err) => {
                return cb.fail(err);
            }
        });
    } catch (err) {
        log.print_unknown_error(err);
        return cb.fail(err);
    }
}

async function make_input_from_file<R>(
    plog: Logger,
    opts: { filename: string },
    cb: {
        ok: (input: Input) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input_from_file");
    return read_json_file(log, opts.filename, {
        ok: (input) => {
            return check_input(log, input, {
                ok: () => {
                    return cb.ok(input);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            });
        },
        fail: (err) => {
            return cb.fail(err);
        }
    });
}

async function make_input_from_prompts<R>(
    plog: Logger,
    cb: { ok: (v: { namespace: string; zip_file_name: string }) => R; fail: (err: Error) => R }
): Promise<R> {
    const log = plog.sub("make_input_from_prompts");
    try {
        var v: { namespace: string; zip_file_name: string } = {
            namespace: await input_namespace(log.sub("namespace"), {
                ok: (v) => v,
                fail: (err) => {
                    throw err;
                }
            }),
            zip_file_name: await input_zip_file_name(log.sub("zip_file_name"), {
                ok: (v) => v,
                fail: (err) => {
                    throw err;
                }
            })
        };
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }

    return cb.ok(v);

    async function input_namespace<R>(plog: Logger, cb: { ok: (v: string) => R; fail: (err: Error) => R }): Promise<R> {
        const log = plog.sub("input_namespace");
        // FIXME implement all string constrains here
        const v = await prompts.input_string("namespace", { allow_empty: true });
        return cb.ok(v);
    }

    async function input_zip_file_name<R>(plog: Logger, cb: { ok: (v: string) => R; fail: (err: Error) => R }): Promise<R> {
        const log = plog.sub("input_zip_file_name");
        // FIXME implement all string constrains here
        const v = await prompts.input_string("zip_file_name", { allow_empty: true });
        return cb.ok(v);
    }
}
