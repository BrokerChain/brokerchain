// auto generated by dev/system

import * as http from "node:http";
import * as https from "node:https";
import * as path from "node:path";
import express from "express";
import cors from "cors";
import compression from "compression";
import { Logger } from "../../../myutils/logger.js";
import { classic } from "../../../myutils/node/classic.js";
import { load_server_cert } from "./load_server_cert.js";
const { __dirname } = classic(import.meta.url);

import { handle_rpc_md5 } from "../md5/rpc/handle.js";
import { handle_rpc_pem_encode } from "../pem-encode/rpc/handle.js";
import { handle_rpc_pem_decode } from "../pem-decode/rpc/handle.js";
import { handle_rpc_x25519_key_pair_generate } from "../x25519-key-pair-generate/rpc/handle.js";
import { handle_rpc_rsa_key_pair_generate } from "../rsa-key-pair-generate/rpc/handle.js";
import { handle_rpc_ecdh_key_pair_generate } from "../ecdh-key-pair-generate/rpc/handle.js";
import { handle_rpc_ecdh_secret_compute } from "../ecdh-secret-compute/rpc/handle.js";
import { handle_rpc_ecdh_x25519_key_pair_generate } from "../ecdh-x25519-key-pair-generate/rpc/handle.js";
import { handle_rpc_ecdh_x25519_secret_compute } from "../ecdh-x25519-secret-compute/rpc/handle.js";
import { handle_rpc_random_hex } from "../random-hex/rpc/handle.js";
import { handle_rpc_convert_hex_to_utf8 } from "../convert-hex-to-utf8/rpc/handle.js";
import { handle_rpc_convert_utf8_to_hex } from "../convert-utf8-to-hex/rpc/handle.js";
import { handle_rpc_curve_algorithm_list } from "../curve-algorithm-list/rpc/handle.js";
import { handle_rpc_hash_algorithm_list } from "../hash-algorithm-list/rpc/handle.js";
import { handle_rpc_cipher_algorithm_list } from "../cipher-algorithm-list/rpc/handle.js";
import { handle_rpc_cipher_hex } from "../cipher-hex/rpc/handle.js";
import { handle_rpc_cipher_text } from "../cipher-text/rpc/handle.js";
import { handle_rpc_decipher_hex } from "../decipher-hex/rpc/handle.js";
import { handle_rpc_decipher_text } from "../decipher-text/rpc/handle.js";
import { handle_rpc_hash_hex } from "../hash-hex/rpc/handle.js";
import { handle_rpc_hash_text } from "../hash-text/rpc/handle.js";
import { handle_rpc_hmac_hex } from "../hmac-hex/rpc/handle.js";
import { handle_rpc_hmac_text } from "../hmac-text/rpc/handle.js";
import { handle_rpc_blake2b_hash_hex } from "../blake2b-hash-hex/rpc/handle.js";
import { handle_rpc_blake2s_hash_hex } from "../blake2s-hash-hex/rpc/handle.js";
import { handle_rpc_blake2b_hmac_hex } from "../blake2b-hmac-hex/rpc/handle.js";
import { handle_rpc_blake2s_hmac_hex } from "../blake2s-hmac-hex/rpc/handle.js";

// the name begins with underscore to avoid name conflicts with the imported items
export function _start(plog: Logger, opt: { host: string; http_port: number; https_port: number; setup?: (exp_app: express.Express) => void }) {
    const log = plog.sub("server.start");
    log.variable("opt", opt);
    const exp_app = express();
    exp_app.use(cors());
    exp_app.use(compression());
    exp_app.use(express.static(path.resolve(__dirname, "../_webroot")));
    exp_app.use(
        express.json({
            limit: "100mb"
        })
    );
    // auto display the index page (redirect to)
    exp_app.get("/", (req, res) => {
        res.redirect("/index/");
    });
    // additional setup (if needed)
    if (opt.setup) {
        opt.setup(exp_app);
    }

    exp_app.post("/library/cryptography/md5", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.md5");
        handle_rpc_md5(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/pem-encode", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.pem-encode");
        handle_rpc_pem_encode(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/pem-decode", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.pem-decode");
        handle_rpc_pem_decode(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/x25519-key-pair-generate", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.x25519-key-pair-generate");
        handle_rpc_x25519_key_pair_generate(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/rsa-key-pair-generate", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.rsa-key-pair-generate");
        handle_rpc_rsa_key_pair_generate(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/ecdh-key-pair-generate", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.ecdh-key-pair-generate");
        handle_rpc_ecdh_key_pair_generate(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/ecdh-secret-compute", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.ecdh-secret-compute");
        handle_rpc_ecdh_secret_compute(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/ecdh-x25519-key-pair-generate", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.ecdh-x25519-key-pair-generate");
        handle_rpc_ecdh_x25519_key_pair_generate(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/ecdh-x25519-secret-compute", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.ecdh-x25519-secret-compute");
        handle_rpc_ecdh_x25519_secret_compute(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/random-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.random-hex");
        handle_rpc_random_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/convert-hex-to-utf8", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.convert-hex-to-utf8");
        handle_rpc_convert_hex_to_utf8(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/convert-utf8-to-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.convert-utf8-to-hex");
        handle_rpc_convert_utf8_to_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/curve-algorithm-list", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.curve-algorithm-list");
        handle_rpc_curve_algorithm_list(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/hash-algorithm-list", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.hash-algorithm-list");
        handle_rpc_hash_algorithm_list(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/cipher-algorithm-list", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.cipher-algorithm-list");
        handle_rpc_cipher_algorithm_list(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/cipher-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.cipher-hex");
        handle_rpc_cipher_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/cipher-text", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.cipher-text");
        handle_rpc_cipher_text(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/decipher-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.decipher-hex");
        handle_rpc_decipher_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/decipher-text", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.decipher-text");
        handle_rpc_decipher_text(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/hash-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.hash-hex");
        handle_rpc_hash_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/hash-text", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.hash-text");
        handle_rpc_hash_text(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/hmac-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.hmac-hex");
        handle_rpc_hmac_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/hmac-text", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.hmac-text");
        handle_rpc_hmac_text(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/blake2b-hash-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.blake2b-hash-hex");
        handle_rpc_blake2b_hash_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/blake2s-hash-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.blake2s-hash-hex");
        handle_rpc_blake2s_hash_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/blake2b-hmac-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.blake2b-hmac-hex");
        handle_rpc_blake2b_hmac_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/blake2s-hmac-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.blake2s-hmac-hex");
        handle_rpc_blake2s_hmac_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    // unsafe!
    exp_app.post("/library/:lib_name/:fun_name", (req, res) => {
        const { lib_name, fun_name } = req.params;
        const req_log = log.sub(`post-unsafe.library.${lib_name}.${fun_name}`);
        req_log.variable("params", req.params);
        const input = req.body;
        req_log.variable("input", input);
        import(`../../${lib_name}/${fun_name}/rpc/handle.js`)
            .then((mod) => {
                const fun_code_name = fun_name.replace(/-/g, "_");
                const target_export_fun_name = `handle_rpc_${fun_code_name}`;
                const fun = mod[target_export_fun_name];
                if (typeof fun !== "function") {
                    const err = req_log.new_error(`function is not exported: ${target_export_fun_name}, but got: ${Object.keys(mod)}`);
                    res.status(404);
                    res.end(err.message);
                    return;
                }

                fun(req_log, input, {
                    invalid_input: (err: any) => {
                        // bad request
                        req_log.error(err);
                        res.status(400);
                        res.end(err.message);
                    },
                    ok: (result: any) => {
                        // include normal fail case
                        req_log.variable("result", result);
                        req_log.ok();
                        res.json(result);
                    },
                    fail: (err: any) => {
                        // internal error (not normal fail)
                        req_log.error(err);
                        res.status(500);
                        res.end(err.message);
                    }
                });
            })
            .catch((err) => {
                req_log.error(err);
                res.status(404);
                res.end(`module not found: ${lib_name}/${fun_name}`);
            });
    });

    const http_server = http.createServer(exp_app);
    const https_server = https.createServer(
        {
            SNICallback: (domain, cb) => {
                load_server_cert(log, domain, {
                    ok: (ctx) => {
                        cb(null, ctx);
                    },
                    fail: (err) => {
                        cb(err, null);
                    }
                });
            }
        },
        exp_app
    );

    http_server.on("error", (err) => {
        log.sub("http_server").error(err);
    });

    https_server.on("error", (err) => {
        log.sub("https_server").error(err);
    });

    http_server.listen(opt.http_port, opt.host);
    https_server.listen(opt.https_port, opt.host);

    log.println(`http://${opt.host}:${opt.http_port}`);
    log.println(`https://${opt.host}${opt.https_port ? ":" + opt.https_port : ""}`);
}
