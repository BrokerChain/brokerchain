// auto generated by dev/system
import express from "express";
import { Logger } from "../../../myutils/logger.js";
import { handle_rpc_base64_to_hex } from "../base64-to-hex/rpc/handle.js";
import { handle_rpc_blake2b_hash_hex } from "../blake2b-hash-hex/rpc/handle.js";
import { handle_rpc_blake2b_hmac_hex } from "../blake2b-hmac-hex/rpc/handle.js";
import { handle_rpc_blake2s_hash_hex } from "../blake2s-hash-hex/rpc/handle.js";
import { handle_rpc_blake2s_hmac_hex } from "../blake2s-hmac-hex/rpc/handle.js";
import { handle_rpc_cipher_algorithm_list } from "../cipher-algorithm-list/rpc/handle.js";
import { handle_rpc_cipher_hex } from "../cipher-hex/rpc/handle.js";
import { handle_rpc_cipher_text } from "../cipher-text/rpc/handle.js";
import { handle_rpc_convert_hex_to_utf8 } from "../convert-hex-to-utf8/rpc/handle.js";
import { handle_rpc_convert_utf8_to_hex } from "../convert-utf8-to-hex/rpc/handle.js";
import { handle_rpc_curve_algorithm_list } from "../curve-algorithm-list/rpc/handle.js";
import { handle_rpc_decipher_hex } from "../decipher-hex/rpc/handle.js";
import { handle_rpc_decipher_text } from "../decipher-text/rpc/handle.js";
import { handle_rpc_ecdh_key_pair_generate } from "../ecdh-key-pair-generate/rpc/handle.js";
import { handle_rpc_ecdh_secret_compute } from "../ecdh-secret-compute/rpc/handle.js";
import { handle_rpc_ecdh_x25519_key_pair_generate } from "../ecdh-x25519-key-pair-generate/rpc/handle.js";
import { handle_rpc_ecdh_x25519_secret_compute } from "../ecdh-x25519-secret-compute/rpc/handle.js";
import { handle_rpc_hash_algorithm_list } from "../hash-algorithm-list/rpc/handle.js";
import { handle_rpc_hash_hex } from "../hash-hex/rpc/handle.js";
import { handle_rpc_hash_text } from "../hash-text/rpc/handle.js";
import { handle_rpc_hmac_hex } from "../hmac-hex/rpc/handle.js";
import { handle_rpc_hmac_text } from "../hmac-text/rpc/handle.js";
import { handle_rpc_md5 } from "../md5/rpc/handle.js";
import { handle_rpc_pem_decode } from "../pem-decode/rpc/handle.js";
import { handle_rpc_pem_encode } from "../pem-encode/rpc/handle.js";
import { handle_rpc_random_hex } from "../random-hex/rpc/handle.js";
import { handle_rpc_rsa_key_pair_generate } from "../rsa-key-pair-generate/rpc/handle.js";
import { handle_rpc_text_to_hex } from "../text-to-hex/rpc/handle.js";
import { handle_rpc_x25519_key_pair_generate } from "../x25519-key-pair-generate/rpc/handle.js";

export function attach_rpc_handler(plog: Logger, opt: { exp_app: express.Express }) {
    const log = plog.sub("server.attach_rpc_handler");
    const { exp_app } = opt;

    exp_app.post("/library/cryptography/base64-to-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.base64-to-hex");
        handle_rpc_base64_to_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/blake2b-hash-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.blake2b-hash-hex");
        handle_rpc_blake2b_hash_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/blake2b-hmac-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.blake2b-hmac-hex");
        handle_rpc_blake2b_hmac_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/blake2s-hash-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.blake2s-hash-hex");
        handle_rpc_blake2s_hash_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/blake2s-hmac-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.blake2s-hmac-hex");
        handle_rpc_blake2s_hmac_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/cipher-algorithm-list", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.cipher-algorithm-list");
        handle_rpc_cipher_algorithm_list(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/cipher-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.cipher-hex");
        handle_rpc_cipher_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/cipher-text", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.cipher-text");
        handle_rpc_cipher_text(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/convert-hex-to-utf8", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.convert-hex-to-utf8");
        handle_rpc_convert_hex_to_utf8(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/convert-utf8-to-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.convert-utf8-to-hex");
        handle_rpc_convert_utf8_to_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/curve-algorithm-list", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.curve-algorithm-list");
        handle_rpc_curve_algorithm_list(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/decipher-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.decipher-hex");
        handle_rpc_decipher_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/decipher-text", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.decipher-text");
        handle_rpc_decipher_text(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/ecdh-key-pair-generate", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.ecdh-key-pair-generate");
        handle_rpc_ecdh_key_pair_generate(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/ecdh-secret-compute", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.ecdh-secret-compute");
        handle_rpc_ecdh_secret_compute(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/ecdh-x25519-key-pair-generate", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.ecdh-x25519-key-pair-generate");
        handle_rpc_ecdh_x25519_key_pair_generate(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/ecdh-x25519-secret-compute", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.ecdh-x25519-secret-compute");
        handle_rpc_ecdh_x25519_secret_compute(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/hash-algorithm-list", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.hash-algorithm-list");
        handle_rpc_hash_algorithm_list(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/hash-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.hash-hex");
        handle_rpc_hash_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/hash-text", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.hash-text");
        handle_rpc_hash_text(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/hmac-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.hmac-hex");
        handle_rpc_hmac_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/hmac-text", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.hmac-text");
        handle_rpc_hmac_text(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/md5", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.md5");
        handle_rpc_md5(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/pem-decode", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.pem-decode");
        handle_rpc_pem_decode(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/pem-encode", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.pem-encode");
        handle_rpc_pem_encode(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/random-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.random-hex");
        handle_rpc_random_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/rsa-key-pair-generate", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.rsa-key-pair-generate");
        handle_rpc_rsa_key_pair_generate(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/text-to-hex", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.text-to-hex");
        handle_rpc_text_to_hex(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/cryptography/x25519-key-pair-generate", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.cryptography.x25519-key-pair-generate");
        handle_rpc_x25519_key_pair_generate(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });
}
