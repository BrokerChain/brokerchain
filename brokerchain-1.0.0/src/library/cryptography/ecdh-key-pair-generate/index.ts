// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";
import { prompts } from "../../../myutils/index.js";
import { read_json_file } from "../../../myutils/node/file/index.js";
import { Input, Output, check_input, OutputOk } from "./type.js";
import { core } from "./core.js";
import { rpc_ecdh_key_pair_generate } from "./rpc/client.js";
import yargs from "yargs";

const log = new Logger("cli");
run();

async function run() {
    try {
        const { input, server } = await make_input(log, {
            ok: async (input: Input, server) => {
                return { input, server };
            },
            fail: async (err) => {
                throw err;
            }
        });

        if (server) {
            await rpc_ecdh_key_pair_generate(
                log,
                {
                    server,
                    input
                },
                {
                    ok: (output) => {
                        log.variable("output", output);
                        console.log("ðŸ˜„ ok");
                    },

                    fail: (err) => {
                        throw err;
                    }
                }
            );
        } else {
            await core(log, input, {
                ok: (output: OutputOk) => {
                    log.variable("output", output);
                    console.log("ðŸ˜„ ok");
                },

                fail: (err) => {
                    throw err;
                }
            });
        }
    } catch (err) {
        log.print_unknown_error(err);
        console.log("ðŸ˜¢ fail.");
    }
}

async function make_input<R>(
    plog: Logger,
    cb: {
        ok: (input: Input, rpc_server: string) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input");

    const args = await yargs(process.argv.slice(2))
        .option("input", {
            type: "string",
            description: "Specify the JSON input directly as a command line argument."
        })
        .option("input-file", {
            type: "string",
            description: "Provide the name of a JSON file from which to read the input."
        })
        .option("server", {
            type: "string",
            description: "Provide the URL of a remote server to send the request to."
        })
        .parse();

    const input = args.input || process.env["x_input"];
    log.variable("input", input);

    const input_file = args.inputFile || process.env["x_input_file"];
    log.variable("input_file", input_file);

    const server = args.server || process.env["x_server"];
    log.variable("x_server", server);

    if (input && input_file) {
        return cb.fail(log.new_error("Conflicting arguments provided. You can use either --input or --input-file, but not both at the same time."));
    }

    if (input) {
        return make_input_from_args(
            log,
            { json_text: input },
            {
                ok: (input) => {
                    return cb.ok(input, server);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            }
        );
    } else if (input_file) {
        return make_input_from_file(
            log,
            { filename: input_file },
            {
                ok: (input) => {
                    return cb.ok(input, server);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            }
        );
    } else {
        return make_input_from_prompts(log, {
            ok: (input) => {
                return cb.ok(input, server);
            },
            fail: (err) => {
                return cb.fail(err);
            }
        });
    }
}

async function make_input_from_args<R>(
    plog: Logger,
    opts: { json_text: string },
    cb: {
        ok: (input: Input) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input_from_args");
    try {
        const input = JSON.parse(opts.json_text);
        log.variable("input", input);

        return check_input(log, input, {
            ok: () => {
                return cb.ok(input);
            },
            fail: (err) => {
                return cb.fail(err);
            }
        });
    } catch (err) {
        log.print_unknown_error(err);
        return cb.fail(err);
    }
}

async function make_input_from_file<R>(
    plog: Logger,
    opts: { filename: string },
    cb: {
        ok: (input: Input) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input_from_file");
    return read_json_file(log, opts.filename, {
        ok: (input) => {
            return check_input(log, input, {
                ok: () => {
                    return cb.ok(input);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            });
        },
        fail: (err) => {
            return cb.fail(err);
        }
    });
}

async function make_input_from_prompts<R>(
    plog: Logger,
    cb: {
        ok: (v: {
            curve_name:
                | "Oakley-EC2N-3"
                | "Oakley-EC2N-4"
                | "SM2"
                | "brainpoolP160r1"
                | "brainpoolP160t1"
                | "brainpoolP192r1"
                | "brainpoolP192t1"
                | "brainpoolP224r1"
                | "brainpoolP224t1"
                | "brainpoolP256r1"
                | "brainpoolP256t1"
                | "brainpoolP320r1"
                | "brainpoolP320t1"
                | "brainpoolP384r1"
                | "brainpoolP384t1"
                | "brainpoolP512r1"
                | "brainpoolP512t1"
                | "c2pnb163v1"
                | "c2pnb163v2"
                | "c2pnb163v3"
                | "c2pnb176v1"
                | "c2pnb208w1"
                | "c2pnb272w1"
                | "c2pnb304w1"
                | "c2pnb368w1"
                | "c2tnb191v1"
                | "c2tnb191v2"
                | "c2tnb191v3"
                | "c2tnb239v1"
                | "c2tnb239v2"
                | "c2tnb239v3"
                | "c2tnb359v1"
                | "c2tnb431r1"
                | "prime192v1"
                | "prime192v2"
                | "prime192v3"
                | "prime239v1"
                | "prime239v2"
                | "prime239v3"
                | "prime256v1"
                | "secp112r1"
                | "secp112r2"
                | "secp128r1"
                | "secp128r2"
                | "secp160k1"
                | "secp160r1"
                | "secp160r2"
                | "secp192k1"
                | "secp224k1"
                | "secp224r1"
                | "secp256k1"
                | "secp384r1"
                | "secp521r1"
                | "sect113r1"
                | "sect113r2"
                | "sect131r1"
                | "sect131r2"
                | "sect163k1"
                | "sect163r1"
                | "sect163r2"
                | "sect193r1"
                | "sect193r2"
                | "sect233k1"
                | "sect233r1"
                | "sect239k1"
                | "sect283k1"
                | "sect283r1"
                | "sect409k1"
                | "sect409r1"
                | "sect571k1"
                | "sect571r1"
                | "wap-wsg-idm-ecid-wtls1"
                | "wap-wsg-idm-ecid-wtls10"
                | "wap-wsg-idm-ecid-wtls11"
                | "wap-wsg-idm-ecid-wtls12"
                | "wap-wsg-idm-ecid-wtls3"
                | "wap-wsg-idm-ecid-wtls4"
                | "wap-wsg-idm-ecid-wtls5"
                | "wap-wsg-idm-ecid-wtls6"
                | "wap-wsg-idm-ecid-wtls7"
                | "wap-wsg-idm-ecid-wtls8"
                | "wap-wsg-idm-ecid-wtls9";
        }) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input_from_prompts");
    try {
        var v: {
            curve_name:
                | "Oakley-EC2N-3"
                | "Oakley-EC2N-4"
                | "SM2"
                | "brainpoolP160r1"
                | "brainpoolP160t1"
                | "brainpoolP192r1"
                | "brainpoolP192t1"
                | "brainpoolP224r1"
                | "brainpoolP224t1"
                | "brainpoolP256r1"
                | "brainpoolP256t1"
                | "brainpoolP320r1"
                | "brainpoolP320t1"
                | "brainpoolP384r1"
                | "brainpoolP384t1"
                | "brainpoolP512r1"
                | "brainpoolP512t1"
                | "c2pnb163v1"
                | "c2pnb163v2"
                | "c2pnb163v3"
                | "c2pnb176v1"
                | "c2pnb208w1"
                | "c2pnb272w1"
                | "c2pnb304w1"
                | "c2pnb368w1"
                | "c2tnb191v1"
                | "c2tnb191v2"
                | "c2tnb191v3"
                | "c2tnb239v1"
                | "c2tnb239v2"
                | "c2tnb239v3"
                | "c2tnb359v1"
                | "c2tnb431r1"
                | "prime192v1"
                | "prime192v2"
                | "prime192v3"
                | "prime239v1"
                | "prime239v2"
                | "prime239v3"
                | "prime256v1"
                | "secp112r1"
                | "secp112r2"
                | "secp128r1"
                | "secp128r2"
                | "secp160k1"
                | "secp160r1"
                | "secp160r2"
                | "secp192k1"
                | "secp224k1"
                | "secp224r1"
                | "secp256k1"
                | "secp384r1"
                | "secp521r1"
                | "sect113r1"
                | "sect113r2"
                | "sect131r1"
                | "sect131r2"
                | "sect163k1"
                | "sect163r1"
                | "sect163r2"
                | "sect193r1"
                | "sect193r2"
                | "sect233k1"
                | "sect233r1"
                | "sect239k1"
                | "sect283k1"
                | "sect283r1"
                | "sect409k1"
                | "sect409r1"
                | "sect571k1"
                | "sect571r1"
                | "wap-wsg-idm-ecid-wtls1"
                | "wap-wsg-idm-ecid-wtls10"
                | "wap-wsg-idm-ecid-wtls11"
                | "wap-wsg-idm-ecid-wtls12"
                | "wap-wsg-idm-ecid-wtls3"
                | "wap-wsg-idm-ecid-wtls4"
                | "wap-wsg-idm-ecid-wtls5"
                | "wap-wsg-idm-ecid-wtls6"
                | "wap-wsg-idm-ecid-wtls7"
                | "wap-wsg-idm-ecid-wtls8"
                | "wap-wsg-idm-ecid-wtls9";
        } = {
            curve_name: await input_curve_name(log.sub("curve_name"), {
                ok: (v) => v,
                fail: (err) => {
                    throw err;
                }
            })
        };
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }

    return cb.ok(v);

    async function input_curve_name<R>(
        plog: Logger,
        cb: {
            ok: (
                v:
                    | "Oakley-EC2N-3"
                    | "Oakley-EC2N-4"
                    | "SM2"
                    | "brainpoolP160r1"
                    | "brainpoolP160t1"
                    | "brainpoolP192r1"
                    | "brainpoolP192t1"
                    | "brainpoolP224r1"
                    | "brainpoolP224t1"
                    | "brainpoolP256r1"
                    | "brainpoolP256t1"
                    | "brainpoolP320r1"
                    | "brainpoolP320t1"
                    | "brainpoolP384r1"
                    | "brainpoolP384t1"
                    | "brainpoolP512r1"
                    | "brainpoolP512t1"
                    | "c2pnb163v1"
                    | "c2pnb163v2"
                    | "c2pnb163v3"
                    | "c2pnb176v1"
                    | "c2pnb208w1"
                    | "c2pnb272w1"
                    | "c2pnb304w1"
                    | "c2pnb368w1"
                    | "c2tnb191v1"
                    | "c2tnb191v2"
                    | "c2tnb191v3"
                    | "c2tnb239v1"
                    | "c2tnb239v2"
                    | "c2tnb239v3"
                    | "c2tnb359v1"
                    | "c2tnb431r1"
                    | "prime192v1"
                    | "prime192v2"
                    | "prime192v3"
                    | "prime239v1"
                    | "prime239v2"
                    | "prime239v3"
                    | "prime256v1"
                    | "secp112r1"
                    | "secp112r2"
                    | "secp128r1"
                    | "secp128r2"
                    | "secp160k1"
                    | "secp160r1"
                    | "secp160r2"
                    | "secp192k1"
                    | "secp224k1"
                    | "secp224r1"
                    | "secp256k1"
                    | "secp384r1"
                    | "secp521r1"
                    | "sect113r1"
                    | "sect113r2"
                    | "sect131r1"
                    | "sect131r2"
                    | "sect163k1"
                    | "sect163r1"
                    | "sect163r2"
                    | "sect193r1"
                    | "sect193r2"
                    | "sect233k1"
                    | "sect233r1"
                    | "sect239k1"
                    | "sect283k1"
                    | "sect283r1"
                    | "sect409k1"
                    | "sect409r1"
                    | "sect571k1"
                    | "sect571r1"
                    | "wap-wsg-idm-ecid-wtls1"
                    | "wap-wsg-idm-ecid-wtls10"
                    | "wap-wsg-idm-ecid-wtls11"
                    | "wap-wsg-idm-ecid-wtls12"
                    | "wap-wsg-idm-ecid-wtls3"
                    | "wap-wsg-idm-ecid-wtls4"
                    | "wap-wsg-idm-ecid-wtls5"
                    | "wap-wsg-idm-ecid-wtls6"
                    | "wap-wsg-idm-ecid-wtls7"
                    | "wap-wsg-idm-ecid-wtls8"
                    | "wap-wsg-idm-ecid-wtls9"
            ) => R;
            fail: (err: Error) => R;
        }
    ): Promise<R> {
        const log = plog.sub("input_curve_name");
        // FIXME implement all string constrains here
        const v:
            | "Oakley-EC2N-3"
            | "Oakley-EC2N-4"
            | "SM2"
            | "brainpoolP160r1"
            | "brainpoolP160t1"
            | "brainpoolP192r1"
            | "brainpoolP192t1"
            | "brainpoolP224r1"
            | "brainpoolP224t1"
            | "brainpoolP256r1"
            | "brainpoolP256t1"
            | "brainpoolP320r1"
            | "brainpoolP320t1"
            | "brainpoolP384r1"
            | "brainpoolP384t1"
            | "brainpoolP512r1"
            | "brainpoolP512t1"
            | "c2pnb163v1"
            | "c2pnb163v2"
            | "c2pnb163v3"
            | "c2pnb176v1"
            | "c2pnb208w1"
            | "c2pnb272w1"
            | "c2pnb304w1"
            | "c2pnb368w1"
            | "c2tnb191v1"
            | "c2tnb191v2"
            | "c2tnb191v3"
            | "c2tnb239v1"
            | "c2tnb239v2"
            | "c2tnb239v3"
            | "c2tnb359v1"
            | "c2tnb431r1"
            | "prime192v1"
            | "prime192v2"
            | "prime192v3"
            | "prime239v1"
            | "prime239v2"
            | "prime239v3"
            | "prime256v1"
            | "secp112r1"
            | "secp112r2"
            | "secp128r1"
            | "secp128r2"
            | "secp160k1"
            | "secp160r1"
            | "secp160r2"
            | "secp192k1"
            | "secp224k1"
            | "secp224r1"
            | "secp256k1"
            | "secp384r1"
            | "secp521r1"
            | "sect113r1"
            | "sect113r2"
            | "sect131r1"
            | "sect131r2"
            | "sect163k1"
            | "sect163r1"
            | "sect163r2"
            | "sect193r1"
            | "sect193r2"
            | "sect233k1"
            | "sect233r1"
            | "sect239k1"
            | "sect283k1"
            | "sect283r1"
            | "sect409k1"
            | "sect409r1"
            | "sect571k1"
            | "sect571r1"
            | "wap-wsg-idm-ecid-wtls1"
            | "wap-wsg-idm-ecid-wtls10"
            | "wap-wsg-idm-ecid-wtls11"
            | "wap-wsg-idm-ecid-wtls12"
            | "wap-wsg-idm-ecid-wtls3"
            | "wap-wsg-idm-ecid-wtls4"
            | "wap-wsg-idm-ecid-wtls5"
            | "wap-wsg-idm-ecid-wtls6"
            | "wap-wsg-idm-ecid-wtls7"
            | "wap-wsg-idm-ecid-wtls8"
            | "wap-wsg-idm-ecid-wtls9" = await prompts.input_string_enum("curve_name", [
            "Oakley-EC2N-3",
            "Oakley-EC2N-4",
            "SM2",
            "brainpoolP160r1",
            "brainpoolP160t1",
            "brainpoolP192r1",
            "brainpoolP192t1",
            "brainpoolP224r1",
            "brainpoolP224t1",
            "brainpoolP256r1",
            "brainpoolP256t1",
            "brainpoolP320r1",
            "brainpoolP320t1",
            "brainpoolP384r1",
            "brainpoolP384t1",
            "brainpoolP512r1",
            "brainpoolP512t1",
            "c2pnb163v1",
            "c2pnb163v2",
            "c2pnb163v3",
            "c2pnb176v1",
            "c2pnb208w1",
            "c2pnb272w1",
            "c2pnb304w1",
            "c2pnb368w1",
            "c2tnb191v1",
            "c2tnb191v2",
            "c2tnb191v3",
            "c2tnb239v1",
            "c2tnb239v2",
            "c2tnb239v3",
            "c2tnb359v1",
            "c2tnb431r1",
            "prime192v1",
            "prime192v2",
            "prime192v3",
            "prime239v1",
            "prime239v2",
            "prime239v3",
            "prime256v1",
            "secp112r1",
            "secp112r2",
            "secp128r1",
            "secp128r2",
            "secp160k1",
            "secp160r1",
            "secp160r2",
            "secp192k1",
            "secp224k1",
            "secp224r1",
            "secp256k1",
            "secp384r1",
            "secp521r1",
            "sect113r1",
            "sect113r2",
            "sect131r1",
            "sect131r2",
            "sect163k1",
            "sect163r1",
            "sect163r2",
            "sect193r1",
            "sect193r2",
            "sect233k1",
            "sect233r1",
            "sect239k1",
            "sect283k1",
            "sect283r1",
            "sect409k1",
            "sect409r1",
            "sect571k1",
            "sect571r1",
            "wap-wsg-idm-ecid-wtls1",
            "wap-wsg-idm-ecid-wtls10",
            "wap-wsg-idm-ecid-wtls11",
            "wap-wsg-idm-ecid-wtls12",
            "wap-wsg-idm-ecid-wtls3",
            "wap-wsg-idm-ecid-wtls4",
            "wap-wsg-idm-ecid-wtls5",
            "wap-wsg-idm-ecid-wtls6",
            "wap-wsg-idm-ecid-wtls7",
            "wap-wsg-idm-ecid-wtls8",
            "wap-wsg-idm-ecid-wtls9"
        ]);
        return cb.ok(v);
    }
}
