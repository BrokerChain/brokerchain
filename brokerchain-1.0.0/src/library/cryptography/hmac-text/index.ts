// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";
import { prompts } from "../../../myutils/index.js";
import { read_json_file } from "../../../myutils/node/file/index.js";
import { Input, Output, check_input, OutputOk } from "./type.js";
import { core } from "./core.js";
import { rpc_hmac_text } from "./rpc/client.js";
import yargs from "yargs";

const log = new Logger("cli");
run();

async function run() {
    try {
        const { input, server } = await make_input(log, {
            ok: async (input: Input, server) => {
                return { input, server };
            },
            fail: async (err) => {
                throw err;
            }
        });

        if (server) {
            await rpc_hmac_text(
                log,
                {
                    server,
                    input
                },
                {
                    ok: (output) => {
                        log.variable("output", output);
                        console.log("ðŸ˜„ ok");
                    },

                    fail: (err) => {
                        throw err;
                    }
                }
            );
        } else {
            await core(log, input, {
                ok: (output: OutputOk) => {
                    log.variable("output", output);
                    console.log("ðŸ˜„ ok");
                },

                fail: (err) => {
                    throw err;
                }
            });
        }
    } catch (err) {
        log.print_unknown_error(err);
        console.log("ðŸ˜¢ fail.");
    }
}

async function make_input<R>(
    plog: Logger,
    cb: {
        ok: (input: Input, rpc_server: string) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input");

    const args = await yargs(process.argv.slice(2))
        .option("input", {
            type: "string",
            description: "Specify the JSON input directly as a command line argument."
        })
        .option("input-file", {
            type: "string",
            description: "Provide the name of a JSON file from which to read the input."
        })
        .option("server", {
            type: "string",
            description: "Provide the URL of a remote server to send the request to."
        })
        .parse();

    const input = args.input || process.env["x_input"];
    log.variable("input", input);

    const input_file = args.inputFile || process.env["x_input_file"];
    log.variable("input_file", input_file);

    const server = args.server || process.env["x_server"];
    log.variable("x_server", server);

    if (input && input_file) {
        return cb.fail(log.new_error("Conflicting arguments provided. You can use either --input or --input-file, but not both at the same time."));
    }

    if (input) {
        return make_input_from_args(
            log,
            { json_text: input },
            {
                ok: (input) => {
                    return cb.ok(input, server);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            }
        );
    } else if (input_file) {
        return make_input_from_file(
            log,
            { filename: input_file },
            {
                ok: (input) => {
                    return cb.ok(input, server);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            }
        );
    } else {
        return make_input_from_prompts(log, {
            ok: (input) => {
                return cb.ok(input, server);
            },
            fail: (err) => {
                return cb.fail(err);
            }
        });
    }
}

async function make_input_from_args<R>(
    plog: Logger,
    opts: { json_text: string },
    cb: {
        ok: (input: Input) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input_from_args");
    try {
        const input = JSON.parse(opts.json_text);
        log.variable("input", input);

        return check_input(log, input, {
            ok: () => {
                return cb.ok(input);
            },
            fail: (err) => {
                return cb.fail(err);
            }
        });
    } catch (err) {
        log.print_unknown_error(err);
        return cb.fail(err);
    }
}

async function make_input_from_file<R>(
    plog: Logger,
    opts: { filename: string },
    cb: {
        ok: (input: Input) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input_from_file");
    return read_json_file(log, opts.filename, {
        ok: (input) => {
            return check_input(log, input, {
                ok: () => {
                    return cb.ok(input);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            });
        },
        fail: (err) => {
            return cb.fail(err);
        }
    });
}

async function make_input_from_prompts<R>(
    plog: Logger,
    cb: {
        ok: (v: {
            algorithm:
                | "RSA-MD5"
                | "RSA-RIPEMD160"
                | "RSA-SHA1"
                | "RSA-SHA1-2"
                | "RSA-SHA224"
                | "RSA-SHA256"
                | "RSA-SHA3-224"
                | "RSA-SHA3-256"
                | "RSA-SHA3-384"
                | "RSA-SHA3-512"
                | "RSA-SHA384"
                | "RSA-SHA512"
                | "RSA-SHA512/224"
                | "RSA-SHA512/256"
                | "RSA-SM3"
                | "blake2b512"
                | "blake2s256"
                | "id-rsassa-pkcs1-v1_5-with-sha3-224"
                | "id-rsassa-pkcs1-v1_5-with-sha3-256"
                | "id-rsassa-pkcs1-v1_5-with-sha3-384"
                | "id-rsassa-pkcs1-v1_5-with-sha3-512"
                | "md5"
                | "md5-sha1"
                | "md5WithRSAEncryption"
                | "ripemd"
                | "ripemd160"
                | "ripemd160WithRSA"
                | "rmd160"
                | "sha1"
                | "sha1WithRSAEncryption"
                | "sha224"
                | "sha224WithRSAEncryption"
                | "sha256"
                | "sha256WithRSAEncryption"
                | "sha3-224"
                | "sha3-256"
                | "sha3-384"
                | "sha3-512"
                | "sha384"
                | "sha384WithRSAEncryption"
                | "sha512"
                | "sha512-224"
                | "sha512-224WithRSAEncryption"
                | "sha512-256"
                | "sha512-256WithRSAEncryption"
                | "sha512WithRSAEncryption"
                | "shake128"
                | "shake256"
                | "sm3"
                | "sm3WithRSAEncryption"
                | "ssl3-md5"
                | "ssl3-sha1";
            key_hex: string;
            text: string;
        }) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input_from_prompts");
    try {
        var v: {
            algorithm:
                | "RSA-MD5"
                | "RSA-RIPEMD160"
                | "RSA-SHA1"
                | "RSA-SHA1-2"
                | "RSA-SHA224"
                | "RSA-SHA256"
                | "RSA-SHA3-224"
                | "RSA-SHA3-256"
                | "RSA-SHA3-384"
                | "RSA-SHA3-512"
                | "RSA-SHA384"
                | "RSA-SHA512"
                | "RSA-SHA512/224"
                | "RSA-SHA512/256"
                | "RSA-SM3"
                | "blake2b512"
                | "blake2s256"
                | "id-rsassa-pkcs1-v1_5-with-sha3-224"
                | "id-rsassa-pkcs1-v1_5-with-sha3-256"
                | "id-rsassa-pkcs1-v1_5-with-sha3-384"
                | "id-rsassa-pkcs1-v1_5-with-sha3-512"
                | "md5"
                | "md5-sha1"
                | "md5WithRSAEncryption"
                | "ripemd"
                | "ripemd160"
                | "ripemd160WithRSA"
                | "rmd160"
                | "sha1"
                | "sha1WithRSAEncryption"
                | "sha224"
                | "sha224WithRSAEncryption"
                | "sha256"
                | "sha256WithRSAEncryption"
                | "sha3-224"
                | "sha3-256"
                | "sha3-384"
                | "sha3-512"
                | "sha384"
                | "sha384WithRSAEncryption"
                | "sha512"
                | "sha512-224"
                | "sha512-224WithRSAEncryption"
                | "sha512-256"
                | "sha512-256WithRSAEncryption"
                | "sha512WithRSAEncryption"
                | "shake128"
                | "shake256"
                | "sm3"
                | "sm3WithRSAEncryption"
                | "ssl3-md5"
                | "ssl3-sha1";
            key_hex: string;
            text: string;
        } = {
            algorithm: await input_algorithm(log.sub("algorithm"), {
                ok: (v) => v,
                fail: (err) => {
                    throw err;
                }
            }),
            key_hex: await input_key_hex(log.sub("key_hex"), {
                ok: (v) => v,
                fail: (err) => {
                    throw err;
                }
            }),
            text: await input_text(log.sub("text"), {
                ok: (v) => v,
                fail: (err) => {
                    throw err;
                }
            })
        };
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }

    return cb.ok(v);

    async function input_algorithm<R>(
        plog: Logger,
        cb: {
            ok: (
                v:
                    | "RSA-MD5"
                    | "RSA-RIPEMD160"
                    | "RSA-SHA1"
                    | "RSA-SHA1-2"
                    | "RSA-SHA224"
                    | "RSA-SHA256"
                    | "RSA-SHA3-224"
                    | "RSA-SHA3-256"
                    | "RSA-SHA3-384"
                    | "RSA-SHA3-512"
                    | "RSA-SHA384"
                    | "RSA-SHA512"
                    | "RSA-SHA512/224"
                    | "RSA-SHA512/256"
                    | "RSA-SM3"
                    | "blake2b512"
                    | "blake2s256"
                    | "id-rsassa-pkcs1-v1_5-with-sha3-224"
                    | "id-rsassa-pkcs1-v1_5-with-sha3-256"
                    | "id-rsassa-pkcs1-v1_5-with-sha3-384"
                    | "id-rsassa-pkcs1-v1_5-with-sha3-512"
                    | "md5"
                    | "md5-sha1"
                    | "md5WithRSAEncryption"
                    | "ripemd"
                    | "ripemd160"
                    | "ripemd160WithRSA"
                    | "rmd160"
                    | "sha1"
                    | "sha1WithRSAEncryption"
                    | "sha224"
                    | "sha224WithRSAEncryption"
                    | "sha256"
                    | "sha256WithRSAEncryption"
                    | "sha3-224"
                    | "sha3-256"
                    | "sha3-384"
                    | "sha3-512"
                    | "sha384"
                    | "sha384WithRSAEncryption"
                    | "sha512"
                    | "sha512-224"
                    | "sha512-224WithRSAEncryption"
                    | "sha512-256"
                    | "sha512-256WithRSAEncryption"
                    | "sha512WithRSAEncryption"
                    | "shake128"
                    | "shake256"
                    | "sm3"
                    | "sm3WithRSAEncryption"
                    | "ssl3-md5"
                    | "ssl3-sha1"
            ) => R;
            fail: (err: Error) => R;
        }
    ): Promise<R> {
        const log = plog.sub("input_algorithm");
        // FIXME implement all string constrains here
        const v:
            | "RSA-MD5"
            | "RSA-RIPEMD160"
            | "RSA-SHA1"
            | "RSA-SHA1-2"
            | "RSA-SHA224"
            | "RSA-SHA256"
            | "RSA-SHA3-224"
            | "RSA-SHA3-256"
            | "RSA-SHA3-384"
            | "RSA-SHA3-512"
            | "RSA-SHA384"
            | "RSA-SHA512"
            | "RSA-SHA512/224"
            | "RSA-SHA512/256"
            | "RSA-SM3"
            | "blake2b512"
            | "blake2s256"
            | "id-rsassa-pkcs1-v1_5-with-sha3-224"
            | "id-rsassa-pkcs1-v1_5-with-sha3-256"
            | "id-rsassa-pkcs1-v1_5-with-sha3-384"
            | "id-rsassa-pkcs1-v1_5-with-sha3-512"
            | "md5"
            | "md5-sha1"
            | "md5WithRSAEncryption"
            | "ripemd"
            | "ripemd160"
            | "ripemd160WithRSA"
            | "rmd160"
            | "sha1"
            | "sha1WithRSAEncryption"
            | "sha224"
            | "sha224WithRSAEncryption"
            | "sha256"
            | "sha256WithRSAEncryption"
            | "sha3-224"
            | "sha3-256"
            | "sha3-384"
            | "sha3-512"
            | "sha384"
            | "sha384WithRSAEncryption"
            | "sha512"
            | "sha512-224"
            | "sha512-224WithRSAEncryption"
            | "sha512-256"
            | "sha512-256WithRSAEncryption"
            | "sha512WithRSAEncryption"
            | "shake128"
            | "shake256"
            | "sm3"
            | "sm3WithRSAEncryption"
            | "ssl3-md5"
            | "ssl3-sha1" = await prompts.input_string_enum("algorithm", [
            "RSA-MD5",
            "RSA-RIPEMD160",
            "RSA-SHA1",
            "RSA-SHA1-2",
            "RSA-SHA224",
            "RSA-SHA256",
            "RSA-SHA3-224",
            "RSA-SHA3-256",
            "RSA-SHA3-384",
            "RSA-SHA3-512",
            "RSA-SHA384",
            "RSA-SHA512",
            "RSA-SHA512/224",
            "RSA-SHA512/256",
            "RSA-SM3",
            "blake2b512",
            "blake2s256",
            "id-rsassa-pkcs1-v1_5-with-sha3-224",
            "id-rsassa-pkcs1-v1_5-with-sha3-256",
            "id-rsassa-pkcs1-v1_5-with-sha3-384",
            "id-rsassa-pkcs1-v1_5-with-sha3-512",
            "md5",
            "md5-sha1",
            "md5WithRSAEncryption",
            "ripemd",
            "ripemd160",
            "ripemd160WithRSA",
            "rmd160",
            "sha1",
            "sha1WithRSAEncryption",
            "sha224",
            "sha224WithRSAEncryption",
            "sha256",
            "sha256WithRSAEncryption",
            "sha3-224",
            "sha3-256",
            "sha3-384",
            "sha3-512",
            "sha384",
            "sha384WithRSAEncryption",
            "sha512",
            "sha512-224",
            "sha512-224WithRSAEncryption",
            "sha512-256",
            "sha512-256WithRSAEncryption",
            "sha512WithRSAEncryption",
            "shake128",
            "shake256",
            "sm3",
            "sm3WithRSAEncryption",
            "ssl3-md5",
            "ssl3-sha1"
        ]);
        return cb.ok(v);
    }

    async function input_key_hex<R>(plog: Logger, cb: { ok: (v: string) => R; fail: (err: Error) => R }): Promise<R> {
        const log = plog.sub("input_key_hex");
        // FIXME implement all string constrains here
        const v = await prompts.input_string("key_hex", { allow_empty: true });
        return cb.ok(v);
    }

    async function input_text<R>(plog: Logger, cb: { ok: (v: string) => R; fail: (err: Error) => R }): Promise<R> {
        const log = plog.sub("input_text");
        // FIXME implement all string constrains here
        const v = await prompts.input_string("text", { allow_empty: true });
        return cb.ok(v);
    }
}
