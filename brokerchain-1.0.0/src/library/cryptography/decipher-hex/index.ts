// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";
import { prompts } from "../../../myutils/index.js";
import { read_json_file } from "../../../myutils/node/file/index.js";
import { Input, Output, check_input, OutputOk } from "./type.js";
import { core } from "./core.js";
import { rpc_decipher_hex } from "./rpc/client.js";
import yargs from "yargs";

const log = new Logger("cli");
run();

async function run() {
    try {
        const { input, server } = await make_input(log, {
            ok: async (input: Input, server) => {
                return { input, server };
            },
            fail: async (err) => {
                throw err;
            }
        });

        if (server) {
            await rpc_decipher_hex(
                log,
                {
                    server,
                    input
                },
                {
                    ok: (output) => {
                        log.variable("output", output);
                        console.log("ðŸ˜„ ok");
                    },

                    fail: (err) => {
                        throw err;
                    }
                }
            );
        } else {
            await core(log, input, {
                ok: (output: OutputOk) => {
                    log.variable("output", output);
                    console.log("ðŸ˜„ ok");
                },

                fail: (err) => {
                    throw err;
                }
            });
        }
    } catch (err) {
        log.print_unknown_error(err);
        console.log("ðŸ˜¢ fail.");
    }
}

async function make_input<R>(
    plog: Logger,
    cb: {
        ok: (input: Input, rpc_server: string) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input");

    const args = await yargs(process.argv.slice(2))
        .option("input", {
            type: "string",
            description: "Specify the JSON input directly as a command line argument."
        })
        .option("input-file", {
            type: "string",
            description: "Provide the name of a JSON file from which to read the input."
        })
        .option("server", {
            type: "string",
            description: "Provide the URL of a remote server to send the request to."
        })
        .parse();

    const input = args.input || process.env["x_input"];
    log.variable("input", input);

    const input_file = args.inputFile || process.env["x_input_file"];
    log.variable("input_file", input_file);

    const server = args.server || process.env["x_server"];
    log.variable("x_server", server);

    if (input && input_file) {
        return cb.fail(log.new_error("Conflicting arguments provided. You can use either --input or --input-file, but not both at the same time."));
    }

    if (input) {
        return make_input_from_args(
            log,
            { json_text: input },
            {
                ok: (input) => {
                    return cb.ok(input, server);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            }
        );
    } else if (input_file) {
        return make_input_from_file(
            log,
            { filename: input_file },
            {
                ok: (input) => {
                    return cb.ok(input, server);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            }
        );
    } else {
        return make_input_from_prompts(log, {
            ok: (input) => {
                return cb.ok(input, server);
            },
            fail: (err) => {
                return cb.fail(err);
            }
        });
    }
}

async function make_input_from_args<R>(
    plog: Logger,
    opts: { json_text: string },
    cb: {
        ok: (input: Input) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input_from_args");
    try {
        const input = JSON.parse(opts.json_text);
        log.variable("input", input);

        return check_input(log, input, {
            ok: () => {
                return cb.ok(input);
            },
            fail: (err) => {
                return cb.fail(err);
            }
        });
    } catch (err) {
        log.print_unknown_error(err);
        return cb.fail(err);
    }
}

async function make_input_from_file<R>(
    plog: Logger,
    opts: { filename: string },
    cb: {
        ok: (input: Input) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input_from_file");
    return read_json_file(log, opts.filename, {
        ok: (input) => {
            return check_input(log, input, {
                ok: () => {
                    return cb.ok(input);
                },
                fail: (err) => {
                    return cb.fail(err);
                }
            });
        },
        fail: (err) => {
            return cb.fail(err);
        }
    });
}

async function make_input_from_prompts<R>(
    plog: Logger,
    cb: {
        ok: (v: {
            algorithm:
                | "aes-128-cbc"
                | "aes-128-cbc-hmac-sha1"
                | "aes-128-cbc-hmac-sha256"
                | "aes-128-ccm"
                | "aes-128-cfb"
                | "aes-128-cfb1"
                | "aes-128-cfb8"
                | "aes-128-ctr"
                | "aes-128-ecb"
                | "aes-128-gcm"
                | "aes-128-ocb"
                | "aes-128-ofb"
                | "aes-128-xts"
                | "aes-192-cbc"
                | "aes-192-ccm"
                | "aes-192-cfb"
                | "aes-192-cfb1"
                | "aes-192-cfb8"
                | "aes-192-ctr"
                | "aes-192-ecb"
                | "aes-192-gcm"
                | "aes-192-ocb"
                | "aes-192-ofb"
                | "aes-256-cbc"
                | "aes-256-cbc-hmac-sha1"
                | "aes-256-cbc-hmac-sha256"
                | "aes-256-ccm"
                | "aes-256-cfb"
                | "aes-256-cfb1"
                | "aes-256-cfb8"
                | "aes-256-ctr"
                | "aes-256-ecb"
                | "aes-256-gcm"
                | "aes-256-ocb"
                | "aes-256-ofb"
                | "aes-256-xts"
                | "aes128"
                | "aes128-wrap"
                | "aes192"
                | "aes192-wrap"
                | "aes256"
                | "aes256-wrap"
                | "aria-128-cbc"
                | "aria-128-ccm"
                | "aria-128-cfb"
                | "aria-128-cfb1"
                | "aria-128-cfb8"
                | "aria-128-ctr"
                | "aria-128-ecb"
                | "aria-128-gcm"
                | "aria-128-ofb"
                | "aria-192-cbc"
                | "aria-192-ccm"
                | "aria-192-cfb"
                | "aria-192-cfb1"
                | "aria-192-cfb8"
                | "aria-192-ctr"
                | "aria-192-ecb"
                | "aria-192-gcm"
                | "aria-192-ofb"
                | "aria-256-cbc"
                | "aria-256-ccm"
                | "aria-256-cfb"
                | "aria-256-cfb1"
                | "aria-256-cfb8"
                | "aria-256-ctr"
                | "aria-256-ecb"
                | "aria-256-gcm"
                | "aria-256-ofb"
                | "aria128"
                | "aria192"
                | "aria256"
                | "camellia-128-cbc"
                | "camellia-128-cfb"
                | "camellia-128-cfb1"
                | "camellia-128-cfb8"
                | "camellia-128-ctr"
                | "camellia-128-ecb"
                | "camellia-128-ofb"
                | "camellia-192-cbc"
                | "camellia-192-cfb"
                | "camellia-192-cfb1"
                | "camellia-192-cfb8"
                | "camellia-192-ctr"
                | "camellia-192-ecb"
                | "camellia-192-ofb"
                | "camellia-256-cbc"
                | "camellia-256-cfb"
                | "camellia-256-cfb1"
                | "camellia-256-cfb8"
                | "camellia-256-ctr"
                | "camellia-256-ecb"
                | "camellia-256-ofb"
                | "camellia128"
                | "camellia192"
                | "camellia256"
                | "chacha20"
                | "chacha20-poly1305"
                | "des-ede"
                | "des-ede-cbc"
                | "des-ede-cfb"
                | "des-ede-ecb"
                | "des-ede-ofb"
                | "des-ede3"
                | "des-ede3-cbc"
                | "des-ede3-cfb"
                | "des-ede3-cfb1"
                | "des-ede3-cfb8"
                | "des-ede3-ecb"
                | "des-ede3-ofb"
                | "des3"
                | "des3-wrap"
                | "id-aes128-CCM"
                | "id-aes128-GCM"
                | "id-aes128-wrap"
                | "id-aes128-wrap-pad"
                | "id-aes192-CCM"
                | "id-aes192-GCM"
                | "id-aes192-wrap"
                | "id-aes192-wrap-pad"
                | "id-aes256-CCM"
                | "id-aes256-GCM"
                | "id-aes256-wrap"
                | "id-aes256-wrap-pad"
                | "id-smime-alg-CMS3DESwrap"
                | "sm4"
                | "sm4-cbc"
                | "sm4-cfb"
                | "sm4-ctr"
                | "sm4-ecb"
                | "sm4-ofb";
            key_hex: string;
            iv_hex: string;
            ciphered_content_hex: string;
        }) => R;
        fail: (err: Error) => R;
    }
): Promise<R> {
    const log = plog.sub("make_input_from_prompts");
    try {
        var v: {
            algorithm:
                | "aes-128-cbc"
                | "aes-128-cbc-hmac-sha1"
                | "aes-128-cbc-hmac-sha256"
                | "aes-128-ccm"
                | "aes-128-cfb"
                | "aes-128-cfb1"
                | "aes-128-cfb8"
                | "aes-128-ctr"
                | "aes-128-ecb"
                | "aes-128-gcm"
                | "aes-128-ocb"
                | "aes-128-ofb"
                | "aes-128-xts"
                | "aes-192-cbc"
                | "aes-192-ccm"
                | "aes-192-cfb"
                | "aes-192-cfb1"
                | "aes-192-cfb8"
                | "aes-192-ctr"
                | "aes-192-ecb"
                | "aes-192-gcm"
                | "aes-192-ocb"
                | "aes-192-ofb"
                | "aes-256-cbc"
                | "aes-256-cbc-hmac-sha1"
                | "aes-256-cbc-hmac-sha256"
                | "aes-256-ccm"
                | "aes-256-cfb"
                | "aes-256-cfb1"
                | "aes-256-cfb8"
                | "aes-256-ctr"
                | "aes-256-ecb"
                | "aes-256-gcm"
                | "aes-256-ocb"
                | "aes-256-ofb"
                | "aes-256-xts"
                | "aes128"
                | "aes128-wrap"
                | "aes192"
                | "aes192-wrap"
                | "aes256"
                | "aes256-wrap"
                | "aria-128-cbc"
                | "aria-128-ccm"
                | "aria-128-cfb"
                | "aria-128-cfb1"
                | "aria-128-cfb8"
                | "aria-128-ctr"
                | "aria-128-ecb"
                | "aria-128-gcm"
                | "aria-128-ofb"
                | "aria-192-cbc"
                | "aria-192-ccm"
                | "aria-192-cfb"
                | "aria-192-cfb1"
                | "aria-192-cfb8"
                | "aria-192-ctr"
                | "aria-192-ecb"
                | "aria-192-gcm"
                | "aria-192-ofb"
                | "aria-256-cbc"
                | "aria-256-ccm"
                | "aria-256-cfb"
                | "aria-256-cfb1"
                | "aria-256-cfb8"
                | "aria-256-ctr"
                | "aria-256-ecb"
                | "aria-256-gcm"
                | "aria-256-ofb"
                | "aria128"
                | "aria192"
                | "aria256"
                | "camellia-128-cbc"
                | "camellia-128-cfb"
                | "camellia-128-cfb1"
                | "camellia-128-cfb8"
                | "camellia-128-ctr"
                | "camellia-128-ecb"
                | "camellia-128-ofb"
                | "camellia-192-cbc"
                | "camellia-192-cfb"
                | "camellia-192-cfb1"
                | "camellia-192-cfb8"
                | "camellia-192-ctr"
                | "camellia-192-ecb"
                | "camellia-192-ofb"
                | "camellia-256-cbc"
                | "camellia-256-cfb"
                | "camellia-256-cfb1"
                | "camellia-256-cfb8"
                | "camellia-256-ctr"
                | "camellia-256-ecb"
                | "camellia-256-ofb"
                | "camellia128"
                | "camellia192"
                | "camellia256"
                | "chacha20"
                | "chacha20-poly1305"
                | "des-ede"
                | "des-ede-cbc"
                | "des-ede-cfb"
                | "des-ede-ecb"
                | "des-ede-ofb"
                | "des-ede3"
                | "des-ede3-cbc"
                | "des-ede3-cfb"
                | "des-ede3-cfb1"
                | "des-ede3-cfb8"
                | "des-ede3-ecb"
                | "des-ede3-ofb"
                | "des3"
                | "des3-wrap"
                | "id-aes128-CCM"
                | "id-aes128-GCM"
                | "id-aes128-wrap"
                | "id-aes128-wrap-pad"
                | "id-aes192-CCM"
                | "id-aes192-GCM"
                | "id-aes192-wrap"
                | "id-aes192-wrap-pad"
                | "id-aes256-CCM"
                | "id-aes256-GCM"
                | "id-aes256-wrap"
                | "id-aes256-wrap-pad"
                | "id-smime-alg-CMS3DESwrap"
                | "sm4"
                | "sm4-cbc"
                | "sm4-cfb"
                | "sm4-ctr"
                | "sm4-ecb"
                | "sm4-ofb";
            key_hex: string;
            iv_hex: string;
            ciphered_content_hex: string;
        } = {
            algorithm: await input_algorithm(log.sub("algorithm"), {
                ok: (v) => v,
                fail: (err) => {
                    throw err;
                }
            }),
            key_hex: await input_key_hex(log.sub("key_hex"), {
                ok: (v) => v,
                fail: (err) => {
                    throw err;
                }
            }),
            iv_hex: await input_iv_hex(log.sub("iv_hex"), {
                ok: (v) => v,
                fail: (err) => {
                    throw err;
                }
            }),
            ciphered_content_hex: await input_ciphered_content_hex(log.sub("ciphered_content_hex"), {
                ok: (v) => v,
                fail: (err) => {
                    throw err;
                }
            })
        };
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }

    return cb.ok(v);

    async function input_algorithm<R>(
        plog: Logger,
        cb: {
            ok: (
                v:
                    | "aes-128-cbc"
                    | "aes-128-cbc-hmac-sha1"
                    | "aes-128-cbc-hmac-sha256"
                    | "aes-128-ccm"
                    | "aes-128-cfb"
                    | "aes-128-cfb1"
                    | "aes-128-cfb8"
                    | "aes-128-ctr"
                    | "aes-128-ecb"
                    | "aes-128-gcm"
                    | "aes-128-ocb"
                    | "aes-128-ofb"
                    | "aes-128-xts"
                    | "aes-192-cbc"
                    | "aes-192-ccm"
                    | "aes-192-cfb"
                    | "aes-192-cfb1"
                    | "aes-192-cfb8"
                    | "aes-192-ctr"
                    | "aes-192-ecb"
                    | "aes-192-gcm"
                    | "aes-192-ocb"
                    | "aes-192-ofb"
                    | "aes-256-cbc"
                    | "aes-256-cbc-hmac-sha1"
                    | "aes-256-cbc-hmac-sha256"
                    | "aes-256-ccm"
                    | "aes-256-cfb"
                    | "aes-256-cfb1"
                    | "aes-256-cfb8"
                    | "aes-256-ctr"
                    | "aes-256-ecb"
                    | "aes-256-gcm"
                    | "aes-256-ocb"
                    | "aes-256-ofb"
                    | "aes-256-xts"
                    | "aes128"
                    | "aes128-wrap"
                    | "aes192"
                    | "aes192-wrap"
                    | "aes256"
                    | "aes256-wrap"
                    | "aria-128-cbc"
                    | "aria-128-ccm"
                    | "aria-128-cfb"
                    | "aria-128-cfb1"
                    | "aria-128-cfb8"
                    | "aria-128-ctr"
                    | "aria-128-ecb"
                    | "aria-128-gcm"
                    | "aria-128-ofb"
                    | "aria-192-cbc"
                    | "aria-192-ccm"
                    | "aria-192-cfb"
                    | "aria-192-cfb1"
                    | "aria-192-cfb8"
                    | "aria-192-ctr"
                    | "aria-192-ecb"
                    | "aria-192-gcm"
                    | "aria-192-ofb"
                    | "aria-256-cbc"
                    | "aria-256-ccm"
                    | "aria-256-cfb"
                    | "aria-256-cfb1"
                    | "aria-256-cfb8"
                    | "aria-256-ctr"
                    | "aria-256-ecb"
                    | "aria-256-gcm"
                    | "aria-256-ofb"
                    | "aria128"
                    | "aria192"
                    | "aria256"
                    | "camellia-128-cbc"
                    | "camellia-128-cfb"
                    | "camellia-128-cfb1"
                    | "camellia-128-cfb8"
                    | "camellia-128-ctr"
                    | "camellia-128-ecb"
                    | "camellia-128-ofb"
                    | "camellia-192-cbc"
                    | "camellia-192-cfb"
                    | "camellia-192-cfb1"
                    | "camellia-192-cfb8"
                    | "camellia-192-ctr"
                    | "camellia-192-ecb"
                    | "camellia-192-ofb"
                    | "camellia-256-cbc"
                    | "camellia-256-cfb"
                    | "camellia-256-cfb1"
                    | "camellia-256-cfb8"
                    | "camellia-256-ctr"
                    | "camellia-256-ecb"
                    | "camellia-256-ofb"
                    | "camellia128"
                    | "camellia192"
                    | "camellia256"
                    | "chacha20"
                    | "chacha20-poly1305"
                    | "des-ede"
                    | "des-ede-cbc"
                    | "des-ede-cfb"
                    | "des-ede-ecb"
                    | "des-ede-ofb"
                    | "des-ede3"
                    | "des-ede3-cbc"
                    | "des-ede3-cfb"
                    | "des-ede3-cfb1"
                    | "des-ede3-cfb8"
                    | "des-ede3-ecb"
                    | "des-ede3-ofb"
                    | "des3"
                    | "des3-wrap"
                    | "id-aes128-CCM"
                    | "id-aes128-GCM"
                    | "id-aes128-wrap"
                    | "id-aes128-wrap-pad"
                    | "id-aes192-CCM"
                    | "id-aes192-GCM"
                    | "id-aes192-wrap"
                    | "id-aes192-wrap-pad"
                    | "id-aes256-CCM"
                    | "id-aes256-GCM"
                    | "id-aes256-wrap"
                    | "id-aes256-wrap-pad"
                    | "id-smime-alg-CMS3DESwrap"
                    | "sm4"
                    | "sm4-cbc"
                    | "sm4-cfb"
                    | "sm4-ctr"
                    | "sm4-ecb"
                    | "sm4-ofb"
            ) => R;
            fail: (err: Error) => R;
        }
    ): Promise<R> {
        const log = plog.sub("input_algorithm");
        // FIXME implement all string constrains here
        const v:
            | "aes-128-cbc"
            | "aes-128-cbc-hmac-sha1"
            | "aes-128-cbc-hmac-sha256"
            | "aes-128-ccm"
            | "aes-128-cfb"
            | "aes-128-cfb1"
            | "aes-128-cfb8"
            | "aes-128-ctr"
            | "aes-128-ecb"
            | "aes-128-gcm"
            | "aes-128-ocb"
            | "aes-128-ofb"
            | "aes-128-xts"
            | "aes-192-cbc"
            | "aes-192-ccm"
            | "aes-192-cfb"
            | "aes-192-cfb1"
            | "aes-192-cfb8"
            | "aes-192-ctr"
            | "aes-192-ecb"
            | "aes-192-gcm"
            | "aes-192-ocb"
            | "aes-192-ofb"
            | "aes-256-cbc"
            | "aes-256-cbc-hmac-sha1"
            | "aes-256-cbc-hmac-sha256"
            | "aes-256-ccm"
            | "aes-256-cfb"
            | "aes-256-cfb1"
            | "aes-256-cfb8"
            | "aes-256-ctr"
            | "aes-256-ecb"
            | "aes-256-gcm"
            | "aes-256-ocb"
            | "aes-256-ofb"
            | "aes-256-xts"
            | "aes128"
            | "aes128-wrap"
            | "aes192"
            | "aes192-wrap"
            | "aes256"
            | "aes256-wrap"
            | "aria-128-cbc"
            | "aria-128-ccm"
            | "aria-128-cfb"
            | "aria-128-cfb1"
            | "aria-128-cfb8"
            | "aria-128-ctr"
            | "aria-128-ecb"
            | "aria-128-gcm"
            | "aria-128-ofb"
            | "aria-192-cbc"
            | "aria-192-ccm"
            | "aria-192-cfb"
            | "aria-192-cfb1"
            | "aria-192-cfb8"
            | "aria-192-ctr"
            | "aria-192-ecb"
            | "aria-192-gcm"
            | "aria-192-ofb"
            | "aria-256-cbc"
            | "aria-256-ccm"
            | "aria-256-cfb"
            | "aria-256-cfb1"
            | "aria-256-cfb8"
            | "aria-256-ctr"
            | "aria-256-ecb"
            | "aria-256-gcm"
            | "aria-256-ofb"
            | "aria128"
            | "aria192"
            | "aria256"
            | "camellia-128-cbc"
            | "camellia-128-cfb"
            | "camellia-128-cfb1"
            | "camellia-128-cfb8"
            | "camellia-128-ctr"
            | "camellia-128-ecb"
            | "camellia-128-ofb"
            | "camellia-192-cbc"
            | "camellia-192-cfb"
            | "camellia-192-cfb1"
            | "camellia-192-cfb8"
            | "camellia-192-ctr"
            | "camellia-192-ecb"
            | "camellia-192-ofb"
            | "camellia-256-cbc"
            | "camellia-256-cfb"
            | "camellia-256-cfb1"
            | "camellia-256-cfb8"
            | "camellia-256-ctr"
            | "camellia-256-ecb"
            | "camellia-256-ofb"
            | "camellia128"
            | "camellia192"
            | "camellia256"
            | "chacha20"
            | "chacha20-poly1305"
            | "des-ede"
            | "des-ede-cbc"
            | "des-ede-cfb"
            | "des-ede-ecb"
            | "des-ede-ofb"
            | "des-ede3"
            | "des-ede3-cbc"
            | "des-ede3-cfb"
            | "des-ede3-cfb1"
            | "des-ede3-cfb8"
            | "des-ede3-ecb"
            | "des-ede3-ofb"
            | "des3"
            | "des3-wrap"
            | "id-aes128-CCM"
            | "id-aes128-GCM"
            | "id-aes128-wrap"
            | "id-aes128-wrap-pad"
            | "id-aes192-CCM"
            | "id-aes192-GCM"
            | "id-aes192-wrap"
            | "id-aes192-wrap-pad"
            | "id-aes256-CCM"
            | "id-aes256-GCM"
            | "id-aes256-wrap"
            | "id-aes256-wrap-pad"
            | "id-smime-alg-CMS3DESwrap"
            | "sm4"
            | "sm4-cbc"
            | "sm4-cfb"
            | "sm4-ctr"
            | "sm4-ecb"
            | "sm4-ofb" = await prompts.input_string_enum("algorithm", [
            "aes-128-cbc",
            "aes-128-cbc-hmac-sha1",
            "aes-128-cbc-hmac-sha256",
            "aes-128-ccm",
            "aes-128-cfb",
            "aes-128-cfb1",
            "aes-128-cfb8",
            "aes-128-ctr",
            "aes-128-ecb",
            "aes-128-gcm",
            "aes-128-ocb",
            "aes-128-ofb",
            "aes-128-xts",
            "aes-192-cbc",
            "aes-192-ccm",
            "aes-192-cfb",
            "aes-192-cfb1",
            "aes-192-cfb8",
            "aes-192-ctr",
            "aes-192-ecb",
            "aes-192-gcm",
            "aes-192-ocb",
            "aes-192-ofb",
            "aes-256-cbc",
            "aes-256-cbc-hmac-sha1",
            "aes-256-cbc-hmac-sha256",
            "aes-256-ccm",
            "aes-256-cfb",
            "aes-256-cfb1",
            "aes-256-cfb8",
            "aes-256-ctr",
            "aes-256-ecb",
            "aes-256-gcm",
            "aes-256-ocb",
            "aes-256-ofb",
            "aes-256-xts",
            "aes128",
            "aes128-wrap",
            "aes192",
            "aes192-wrap",
            "aes256",
            "aes256-wrap",
            "aria-128-cbc",
            "aria-128-ccm",
            "aria-128-cfb",
            "aria-128-cfb1",
            "aria-128-cfb8",
            "aria-128-ctr",
            "aria-128-ecb",
            "aria-128-gcm",
            "aria-128-ofb",
            "aria-192-cbc",
            "aria-192-ccm",
            "aria-192-cfb",
            "aria-192-cfb1",
            "aria-192-cfb8",
            "aria-192-ctr",
            "aria-192-ecb",
            "aria-192-gcm",
            "aria-192-ofb",
            "aria-256-cbc",
            "aria-256-ccm",
            "aria-256-cfb",
            "aria-256-cfb1",
            "aria-256-cfb8",
            "aria-256-ctr",
            "aria-256-ecb",
            "aria-256-gcm",
            "aria-256-ofb",
            "aria128",
            "aria192",
            "aria256",
            "camellia-128-cbc",
            "camellia-128-cfb",
            "camellia-128-cfb1",
            "camellia-128-cfb8",
            "camellia-128-ctr",
            "camellia-128-ecb",
            "camellia-128-ofb",
            "camellia-192-cbc",
            "camellia-192-cfb",
            "camellia-192-cfb1",
            "camellia-192-cfb8",
            "camellia-192-ctr",
            "camellia-192-ecb",
            "camellia-192-ofb",
            "camellia-256-cbc",
            "camellia-256-cfb",
            "camellia-256-cfb1",
            "camellia-256-cfb8",
            "camellia-256-ctr",
            "camellia-256-ecb",
            "camellia-256-ofb",
            "camellia128",
            "camellia192",
            "camellia256",
            "chacha20",
            "chacha20-poly1305",
            "des-ede",
            "des-ede-cbc",
            "des-ede-cfb",
            "des-ede-ecb",
            "des-ede-ofb",
            "des-ede3",
            "des-ede3-cbc",
            "des-ede3-cfb",
            "des-ede3-cfb1",
            "des-ede3-cfb8",
            "des-ede3-ecb",
            "des-ede3-ofb",
            "des3",
            "des3-wrap",
            "id-aes128-CCM",
            "id-aes128-GCM",
            "id-aes128-wrap",
            "id-aes128-wrap-pad",
            "id-aes192-CCM",
            "id-aes192-GCM",
            "id-aes192-wrap",
            "id-aes192-wrap-pad",
            "id-aes256-CCM",
            "id-aes256-GCM",
            "id-aes256-wrap",
            "id-aes256-wrap-pad",
            "id-smime-alg-CMS3DESwrap",
            "sm4",
            "sm4-cbc",
            "sm4-cfb",
            "sm4-ctr",
            "sm4-ecb",
            "sm4-ofb"
        ]);
        return cb.ok(v);
    }

    async function input_key_hex<R>(plog: Logger, cb: { ok: (v: string) => R; fail: (err: Error) => R }): Promise<R> {
        const log = plog.sub("input_key_hex");
        // FIXME implement all string constrains here
        const v = await prompts.input_string("key_hex", { allow_empty: true });
        return cb.ok(v);
    }

    async function input_iv_hex<R>(plog: Logger, cb: { ok: (v: string) => R; fail: (err: Error) => R }): Promise<R> {
        const log = plog.sub("input_iv_hex");
        // FIXME implement all string constrains here
        const v = await prompts.input_string("iv_hex", { allow_empty: true });
        return cb.ok(v);
    }

    async function input_ciphered_content_hex<R>(plog: Logger, cb: { ok: (v: string) => R; fail: (err: Error) => R }): Promise<R> {
        const log = plog.sub("input_ciphered_content_hex");
        // FIXME implement all string constrains here
        const v = await prompts.input_string("ciphered_content_hex", { allow_empty: true });
        return cb.ok(v);
    }
}
