// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {}

export interface OutputOk {
    private_key: { pem: string };
    public_key: { pem: string };
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            throw new Error("v contains unknown field: " + field);
        });
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            private_key: copy_private_key(v.private_key),
            public_key: copy_public_key(v.public_key)
        };
        return obj;
    } else {
        return { private_key: { pem: "" }, public_key: { pem: "" } };
    }

    function copy_private_key(v: any): { pem: string } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                pem: copy_pem(v.pem)
            };
            return obj;
        } else {
            return { pem: "" };
        }

        function copy_pem(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }

    function copy_public_key(v: any): { pem: string } {
        if (typeof v === "object" && v !== null) {
            const obj = {
                pem: copy_pem(v.pem)
            };
            return obj;
        } else {
            return { pem: "" };
        }

        function copy_pem(v: any): string {
            return typeof v === "string" ? v : "";
        }
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
