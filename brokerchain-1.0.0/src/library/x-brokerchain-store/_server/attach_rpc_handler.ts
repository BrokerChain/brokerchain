// auto generated by dev/system
import express from "express";
import { Logger } from "../../../myutils/logger.js";
import { handle_rpc_peer_ls_raw } from "../peer-ls-raw/rpc/handle.js";
import { handle_rpc_peer_add_raw } from "../peer-add-raw/rpc/handle.js";
import { handle_rpc_peer_get_raw } from "../peer-get-raw/rpc/handle.js";
import { handle_rpc_peer_set_raw } from "../peer-set-raw/rpc/handle.js";
import { handle_rpc_peer_ls } from "../peer-ls/rpc/handle.js";
import { handle_rpc_peer_add } from "../peer-add/rpc/handle.js";
import { handle_rpc_peer_del } from "../peer-del/rpc/handle.js";
import { handle_rpc_peer_get } from "../peer-get/rpc/handle.js";
import { handle_rpc_peer_set } from "../peer-set/rpc/handle.js";
import { handle_rpc_peer_upgrade } from "../peer-upgrade/rpc/handle.js";
import { handle_rpc_upgrade } from "../upgrade/rpc/handle.js";

export function attach_rpc_handler(plog: Logger, opt: { exp_app: express.Express }) {
    const log = plog.sub("server.attach_rpc_handler");
    const { exp_app } = opt;

    exp_app.post("/library/x-brokerchain-store/peer-ls-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.peer-ls-raw");
        handle_rpc_peer_ls_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/peer-add-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.peer-add-raw");
        handle_rpc_peer_add_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/peer-get-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.peer-get-raw");
        handle_rpc_peer_get_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/peer-set-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.peer-set-raw");
        handle_rpc_peer_set_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/peer-ls", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.peer-ls");
        handle_rpc_peer_ls(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/peer-add", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.peer-add");
        handle_rpc_peer_add(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/peer-del", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.peer-del");
        handle_rpc_peer_del(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/peer-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.peer-get");
        handle_rpc_peer_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/peer-set", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.peer-set");
        handle_rpc_peer_set(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/peer-upgrade", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.peer-upgrade");
        handle_rpc_peer_upgrade(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/upgrade", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.upgrade");
        handle_rpc_upgrade(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });
}
