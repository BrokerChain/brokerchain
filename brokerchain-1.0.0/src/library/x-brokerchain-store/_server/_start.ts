// auto generated by dev/system

import * as http from "node:http";
import * as https from "node:https";
import * as path from "node:path";
import express from "express";
import cors from "cors";
import compression from "compression";
import { Logger } from "../../../myutils/logger.js";
import { classic } from "../../../myutils/node/classic.js";
import { load_server_cert } from "./load_server_cert.js";
const { __dirname } = classic(import.meta.url);

import { handle_rpc_node_ls_raw } from "../node-ls-raw/rpc/handle.js";
import { handle_rpc_node_add_raw } from "../node-add-raw/rpc/handle.js";
import { handle_rpc_node_get_raw } from "../node-get-raw/rpc/handle.js";
import { handle_rpc_node_set_raw } from "../node-set-raw/rpc/handle.js";
import { handle_rpc_node_ls } from "../node-ls/rpc/handle.js";
import { handle_rpc_node_add } from "../node-add/rpc/handle.js";
import { handle_rpc_node_del } from "../node-del/rpc/handle.js";
import { handle_rpc_node_get } from "../node-get/rpc/handle.js";
import { handle_rpc_node_set } from "../node-set/rpc/handle.js";
import { handle_rpc_node_upgrade } from "../node-upgrade/rpc/handle.js";

// the name begins with underscore to avoid name conflicts with the imported items
export function _start(plog: Logger, opt: { host: string; http_port: number; https_port: number; setup?: (exp_app: express.Express) => void }) {
    const log = plog.sub("server.start");
    log.variable("opt", opt);
    const exp_app = express();
    exp_app.use(cors());
    exp_app.use(compression());
    exp_app.use(express.static(path.resolve(__dirname, "../_webroot")));
    exp_app.use(
        express.json({
            limit: "100mb"
        })
    );
    // auto display the index page (redirect to)
    exp_app.get("/", (req, res) => {
        res.redirect("/index/");
    });
    // additional setup (if needed)
    if (opt.setup) {
        opt.setup(exp_app);
    }

    exp_app.post("/library/x-brokerchain-store/node-ls-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.node-ls-raw");
        handle_rpc_node_ls_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/node-add-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.node-add-raw");
        handle_rpc_node_add_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/node-get-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.node-get-raw");
        handle_rpc_node_get_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/node-set-raw", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.node-set-raw");
        handle_rpc_node_set_raw(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/node-ls", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.node-ls");
        handle_rpc_node_ls(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/node-add", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.node-add");
        handle_rpc_node_add(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/node-del", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.node-del");
        handle_rpc_node_del(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/node-get", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.node-get");
        handle_rpc_node_get(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/node-set", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.node-set");
        handle_rpc_node_set(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/x-brokerchain-store/node-upgrade", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.x-brokerchain-store.node-upgrade");
        handle_rpc_node_upgrade(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    // unsafe!
    exp_app.post("/library/:lib_name/:fun_name", (req, res) => {
        const { lib_name, fun_name } = req.params;
        const req_log = log.sub(`post-unsafe.library.${lib_name}.${fun_name}`);
        req_log.variable("params", req.params);
        const input = req.body;
        req_log.variable("input", input);
        import(`../../${lib_name}/${fun_name}/rpc/handle.js`)
            .then((mod) => {
                const fun_code_name = fun_name.replace(/-/g, "_");
                const target_export_fun_name = `handle_rpc_${fun_code_name}`;
                const fun = mod[target_export_fun_name];
                if (typeof fun !== "function") {
                    const err = req_log.new_error(`function is not exported: ${target_export_fun_name}, but got: ${Object.keys(mod)}`);
                    res.status(404);
                    res.end(err.message);
                    return;
                }

                fun(req_log, input, {
                    invalid_input: (err: any) => {
                        // bad request
                        req_log.error(err);
                        res.status(400);
                        res.end(err.message);
                    },
                    ok: (result: any) => {
                        // include normal fail case
                        req_log.variable("result", result);
                        req_log.ok();
                        res.json(result);
                    },
                    fail: (err: any) => {
                        // internal error (not normal fail)
                        req_log.error(err);
                        res.status(500);
                        res.end(err.message);
                    }
                });
            })
            .catch((err) => {
                req_log.error(err);
                res.status(404);
                res.end(`module not found: ${lib_name}/${fun_name}`);
            });
    });

    const http_server = http.createServer(exp_app);
    const https_server = https.createServer(
        {
            SNICallback: (domain, cb) => {
                load_server_cert(log, domain, {
                    ok: (ctx) => {
                        cb(null, ctx);
                    },
                    fail: (err) => {
                        cb(err, null);
                    }
                });
            }
        },
        exp_app
    );

    http_server.on("error", (err) => {
        log.sub("http_server").error(err);
    });

    https_server.on("error", (err) => {
        log.sub("https_server").error(err);
    });

    http_server.listen(opt.http_port, opt.host);
    https_server.listen(opt.https_port, opt.host);

    log.println(`http://${opt.host}:${opt.http_port}`);
    log.println(`https://${opt.host}${opt.https_port ? ":" + opt.https_port : ""}`);
}
