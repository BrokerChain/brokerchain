// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";

export interface Input {
    peer: { fake?: boolean; create_time: string; update_time: string; address: string; port: number };
}

export interface OutputOk {
    id: string;
}

export interface OutputFail {}

export interface Callback<R> {
    ok: (output: OutputOk) => R;
    fail: (err: Error) => R;
}

export function check_input<R>(plog: Logger, v: any, cb: { ok: () => R; fail: (err: Error) => R }): R {
    const log = plog.sub("check_input");
    log.variable("v", v);
    try {
        log.println("v must be object");
        if (typeof v !== "object" || v === null) {
            throw new Error("v is not object");
        }

        Object.keys(v).forEach((field) => {
            if (field === "peer") return;
            throw new Error("v contains unknown field: " + field);
        });

        log.println("v.peer must be object");
        if (typeof v.peer !== "object" || v.peer === null) {
            throw new Error("v.peer is not object");
        }

        Object.keys(v.peer).forEach((field) => {
            if (field === "fake") return;
            if (field === "create_time") return;
            if (field === "update_time") return;
            if (field === "address") return;
            if (field === "port") return;
            throw new Error("v.peer contains unknown field: " + field);
        });

        if (v.peer.fake !== undefined) {
            log.println("v.peer.fake must be boolean");
            if (typeof v.peer.fake !== "boolean") {
                throw new Error("v.peer.fake is not boolean");
            }
        }

        log.println("v.peer.create_time must be string");
        if (typeof v.peer.create_time !== "string") {
            throw new Error("v.peer.create_time is not string");
        }

        if (v.peer.create_time !== "" && Number.isNaN(Date.parse(v.peer.create_time))) {
            throw new Error("v.peer.create_time is not a valid datetime string");
        }

        log.println("v.peer.update_time must be string");
        if (typeof v.peer.update_time !== "string") {
            throw new Error("v.peer.update_time is not string");
        }

        if (v.peer.update_time !== "" && Number.isNaN(Date.parse(v.peer.update_time))) {
            throw new Error("v.peer.update_time is not a valid datetime string");
        }

        log.println("v.peer.address must be string");
        if (typeof v.peer.address !== "string") {
            throw new Error("v.peer.address is not string");
        }

        log.println("v.peer.port must be number");
        if (typeof v.peer.port !== "number") {
            throw new Error("v.peer.port is not number");
        }

        if (Number.isSafeInteger(v.peer.port) === false) {
            throw new Error("v.peer.port is not safe integer");
        }
    } catch (err) {
        log.error(err);
        return cb.fail(err);
    }
    // nothing wrong
    log.ok();
    return cb.ok();
}

// JSON stringify value before copy to handle some specific problem
// eg. Date Object probelm
export function copy_output_ok(v: any): OutputOk {
    if (v !== undefined) {
        const v_cloned = JSON.parse(JSON.stringify(v));
        return _copy_output_ok(v_cloned);
    } else {
        return _copy_output_ok(v);
    }
}

export function _copy_output_ok(v: any): OutputOk {
    if (typeof v === "object" && v !== null) {
        const obj = {
            id: copy_id(v.id)
        };
        return obj;
    } else {
        return { id: "" };
    }

    function copy_id(v: any): string {
        return typeof v === "string" ? v : "";
    }
}

// backward compatible purpose
export type Output = OutputOk;
export const copy_output = copy_output_ok;
