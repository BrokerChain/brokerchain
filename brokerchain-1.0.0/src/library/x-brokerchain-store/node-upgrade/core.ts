// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";
import { Input, Output, Callback } from "./type.js";
import * as store from "../_/node/index.js";

export async function core<R>(plog: Logger, input: Input, cb: Callback<R>): Promise<R> {
    const log = plog.sub("x-brokerchain-store.node-upgrade");
    log.variable("input", input);
    try {
        return await store.ls(
            log,
            {},
            {
                empty: async () => {
                    log.println("empty, nothing to do");
                    return cb.ok({});
                },
                ok: async (list, engine) => {
                    const safe_copied_list = list.map((item) => store.copy_private(item));

                    for (const [i, item] of safe_copied_list.entries()) {
                        log.println(`upgrade ${i + 1}/${safe_copied_list.length}: ${item.id}`);
                        await store.set(log, item, {
                            none: () => {
                                throw log.new_error("unexpected failure: item retrieval was successful, but writing it back failed");
                            },
                            ok: () => {
                                log.println("upgrade ok: " + item.id);
                            },
                            fail: (err) => {
                                throw err;
                            }
                        });
                    }

                    return cb.ok({});
                },
                fail: async (err) => {
                    return cb.fail(err);
                }
            }
        );
    } catch (err) {
        log.print_unknown_error(err);
        return cb.fail(err);
    }
}
