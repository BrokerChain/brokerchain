// auto generated by dev/system

import { Logger } from "../../../myutils/logger.js";
import { Input, Output, Callback } from "./type.js";
import * as store from "../_/node/index.js";

export async function core<R>(plog: Logger, input: Input, cb: Callback<R>): Promise<R> {
    const log = plog.sub("x-brokerchain-store.node-set");
    log.variable("input", input);
    return await store.get(log, input.node.id, {
        none: async () => {
            return cb.fail(log.new_error("not found"));
        },
        ok: async (item) => {
            return await store.set(
                log,
                {
                    ...item,
                    ...input.node,
                    update_time: new Date().toISOString()
                },
                {
                    none: () => {
                        return cb.fail(log.new_error("not found"));
                    },
                    ok: () => {
                        return cb.ok({});
                    },
                    fail: (err) => {
                        return cb.fail(err);
                    }
                }
            );
        },
        fail: async (err) => {
            return cb.fail(err);
        }
    });
}
