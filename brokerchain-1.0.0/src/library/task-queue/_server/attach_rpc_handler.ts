// auto generated by dev/system
import express from "express";
import { Logger } from "../../../myutils/logger.js";
import { handle_rpc_demo_task_add } from "../demo-task-add/rpc/handle.js";
import { handle_rpc_demo_task_add_wait } from "../demo-task-add-wait/rpc/handle.js";
import { handle_rpc_queue_status } from "../queue-status/rpc/handle.js";
import { handle_rpc_queue_run } from "../queue-run/rpc/handle.js";
import { handle_rpc_queue_cycle } from "../queue-cycle/rpc/handle.js";
import { handle_rpc_task_add } from "../task-add/rpc/handle.js";
import { handle_rpc_task_add_wait } from "../task-add-wait/rpc/handle.js";
import { handle_rpc_task_wait } from "../task-wait/rpc/handle.js";
import { handle_rpc_all_status } from "../all-status/rpc/handle.js";
import { handle_rpc_all_cycle } from "../all-cycle/rpc/handle.js";

export function attach_rpc_handler(plog: Logger, opt: { exp_app: express.Express }) {
    const log = plog.sub("server.attach_rpc_handler");
    const { exp_app } = opt;

    exp_app.post("/library/task-queue/demo-task-add", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.task-queue.demo-task-add");
        handle_rpc_demo_task_add(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/task-queue/demo-task-add-wait", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.task-queue.demo-task-add-wait");
        handle_rpc_demo_task_add_wait(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/task-queue/queue-status", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.task-queue.queue-status");
        handle_rpc_queue_status(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/task-queue/queue-run", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.task-queue.queue-run");
        handle_rpc_queue_run(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/task-queue/queue-cycle", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.task-queue.queue-cycle");
        handle_rpc_queue_cycle(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/task-queue/task-add", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.task-queue.task-add");
        handle_rpc_task_add(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/task-queue/task-add-wait", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.task-queue.task-add-wait");
        handle_rpc_task_add_wait(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/task-queue/task-wait", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.task-queue.task-wait");
        handle_rpc_task_wait(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/task-queue/all-status", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.task-queue.all-status");
        handle_rpc_all_status(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });

    exp_app.post("/library/task-queue/all-cycle", (req, res) => {
        const input = req.body;
        const req_log = log.sub("post.library.task-queue.all-cycle");
        handle_rpc_all_cycle(req_log, input, {
            invalid_input: (err) => {
                // bad request
                req_log.error(err);
                res.status(400);
                res.end(err.message);
            },
            ok: (result) => {
                // include normal fail case
                req_log.variable("result", result);
                req_log.ok();
                res.json(result);
            },
            fail: (err) => {
                // internal error (not normal fail)
                req_log.error(err);
                res.status(500);
                res.end(err.message);
            }
        });
    });
}
